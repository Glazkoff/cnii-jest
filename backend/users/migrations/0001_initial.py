# Generated by Django 3.2.3 on 2021-05-29 12:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('surname', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('patricity', models.CharField(blank=True, max_length=150, verbose_name='Отчество')),
                ('birthday', models.DateField(verbose_name='Дата рождения')),
                ('sex', models.CharField(choices=[('M', 'Мужской'), ('F', 'Женский')], max_length=1)),
                ('native_language', models.CharField(max_length=150, verbose_name='Родной язык')),
                ('citizenship', models.CharField(max_length=150, verbose_name='Гражданство')),
                ('martial_status', models.CharField(max_length=150, verbose_name='Семейное положение')),
                ('organization', models.CharField(max_length=150, verbose_name='Организация')),
                ('job_position', models.CharField(max_length=150, verbose_name='Занимаемая должность')),
                ('education', models.CharField(max_length=150, verbose_name='Образование')),
                ('home_address', models.CharField(max_length=150, verbose_name='Домашний адрес')),
                ('passport', models.CharField(max_length=150, verbose_name='Данные паспорта')),
                ('passport_part1_scan_url', models.URLField(verbose_name='URLСканаПаспортаРазворот1')),
                ('passport_part2_scan_url', models.URLField(verbose_name='URLСканаПаспортаРазворот2')),
                ('email', models.EmailField(max_length=150, verbose_name='E-mail')),
                ('personal_phone', models.CharField(max_length=150, verbose_name='Мобильный телефон')),
                ('home_phone', models.CharField(max_length=150, verbose_name='Домашний телефон')),
                ('work_phone', models.CharField(max_length=150, verbose_name='Рабочий телефон')),
                ('work_experience_full_years', models.IntegerField(verbose_name='Стаж полных лет')),
                ('work_experience_current_job', models.IntegerField(verbose_name='Стаж настоящей должности')),
                ('awards', models.TextField(blank=True, verbose_name='Наличие наград')),
                ('training', models.TextField(blank=True, verbose_name='Повышение квалификации')),
                ('organization_membership', models.TextField(blank=True, verbose_name='Членство в организациях')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
