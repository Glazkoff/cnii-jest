# Generated by Django 3.2.3 on 2021-05-29 11:24

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicationAccountNumber',
            fields=[
                ('applocation_number_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'ModelName',
                'verbose_name_plural': 'ModelNames',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ApplicationForm',
            fields=[
                ('application_id', models.AutoField(primary_key=True, serialize=False)),
                ('basis_for_certification', models.CharField(max_length=150, verbose_name='Основание для аттестации')),
                ('pass_certificate_scan_url', models.URLField(verbose_name='URL свидетельства о прохождении')),
                ('education_scan_url', models.URLField(verbose_name='URL документа об образовании')),
                ('training_url', models.URLField(verbose_name='URL диплом о подготовке')),
                ('is_draft', models.BooleanField(default=True, verbose_name='Черновик')),
                ('review_status', models.CharField(max_length=150, verbose_name='Статус рассмотрения')),
                ('is_paid', models.BooleanField(default=True, verbose_name='Оплачено')),
                ('experience_confirmation_scan_url', models.URLField(verbose_name='URL подтверждения стажа')),
                ('employee_сharacteristics_scan_url', models.URLField(verbose_name='URL характеристики на работника')),
            ],
            options={
                'verbose_name': 'Заявление на аттестацию',
                'verbose_name_plural': 'Заявления на аттестацию',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('surname', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('patricity', models.CharField(blank=True, max_length=150, verbose_name='Отчество')),
                ('birthday', models.DateField(verbose_name='Дата рождения')),
                ('sex', models.CharField(choices=[('M', 'Мужской'), ('F', 'Женский')], max_length=1)),
                ('native_language', models.CharField(max_length=150, verbose_name='')),
                ('citizenship', models.CharField(max_length=150, verbose_name='')),
                ('martial_status', models.CharField(max_length=150, verbose_name='')),
                ('organization', models.CharField(max_length=150, verbose_name='')),
                ('job_position', models.CharField(max_length=150, verbose_name='')),
                ('education', models.CharField(max_length=150, verbose_name='')),
                ('home_address', models.CharField(max_length=150, verbose_name='')),
                ('passport', models.CharField(max_length=150, verbose_name='')),
                ('passport_part1_scan_url', models.URLField(verbose_name='')),
                ('passport_part2_scan_url', models.URLField(verbose_name='')),
                ('email', models.EmailField(max_length=150, verbose_name='')),
                ('personal_phone', models.CharField(max_length=150, verbose_name='')),
                ('home_phone', models.CharField(max_length=150, verbose_name='')),
                ('work_phone', models.CharField(max_length=150, verbose_name='')),
                ('work_experience_full_years', models.IntegerField(verbose_name='')),
                ('work_experience_current_job', models.IntegerField(verbose_name='')),
                ('awards', models.TextField(blank=True, verbose_name='')),
                ('training', models.TextField(blank=True, verbose_name='')),
                ('organization_membership', models.TextField(blank=True, verbose_name='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
